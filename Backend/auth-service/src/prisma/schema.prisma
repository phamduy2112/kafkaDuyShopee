generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model cart_items {
  id         Int       @id @default(autoincrement())
  cart_id    Int?
  product_id Int?
  quantity   Int?      @default(1)
  carts      carts?    @relation(fields: [cart_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  products   products? @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model carts {
  id         Int          @id @default(autoincrement())
  user_id    Int?
  created_at DateTime?    @default(now()) @db.Timestamp(6)
  cart_items cart_items[]
  users      users?       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model categories {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(100)
  categories_dad String @db.VarChar(100)
  created_at        DateTime?  @default(now()) @db.Timestamp(6)

}

model comments {
  id                Int        @id @default(autoincrement())
  user_id           Int?
  product_id        Int?
  content           String?
  parent_comment_id Int?
  created_at        DateTime?  @default(now()) @db.Timestamp(6)
  comments          comments?  @relation("commentsTocomments", fields: [parent_comment_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  other_comments    comments[] @relation("commentsTocomments")
  products          products?  @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users             users?     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  likes             likes[]
}

model likes {
  id         Int       @id @default(autoincrement())
  user_id    Int?
  comment_id Int?
  created_at DateTime? @default(now()) @db.Timestamp(6)
  comments   comments? @relation(fields: [comment_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users      users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model media {
  id         Int       @id @default(autoincrement())
  product_id Int?
  url        String
  type       String?   @db.VarChar(20)
  products   products? @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model order_items {
  id         Int       @id @default(autoincrement())
  order_id   Int?
  product_id Int?
  quantity   Int?
  price      Decimal?  @db.Decimal(10, 2)
  orders     orders?   @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  products   products? @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model orders {
  id           Int           @id @default(autoincrement())
  user_id      Int?
  total_amount Decimal?      @db.Decimal(10, 2)
  status       String?       @default("pending") @db.VarChar(50)
  created_at   DateTime?     @default(now()) @db.Timestamp(6)
  order_items  order_items[]
  users        users?        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model products {
  id          Int           @id @default(autoincrement())
  name        String?       @db.VarChar(255)
  description String?
  price       Decimal?      @db.Decimal(10, 2)
  quantity    Int?
  category_id Int?
  created_at  DateTime?     @default(now()) @db.Timestamp(6)
  cart_items  cart_items[]
  comments    comments[]
  media       media[]
  order_items order_items[]
}

model users {
  id         Int        @id @default(autoincrement())
  name       String?    @db.VarChar(100)
  email      String?    @unique @db.VarChar(100)
  password   String?    @db.VarChar(255)
  phone      String?    @db.VarChar(20)
  avatar_url String?    
  address    String?
  created_at DateTime?  @default(now()) @db.Timestamp(6)
  carts      carts[]
  comments   comments[]
  likes      likes[]
  orders     orders[]
}
